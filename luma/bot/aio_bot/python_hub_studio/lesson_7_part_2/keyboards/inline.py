from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


class MenuCallBack(CallbackData, prefix="menu"):
    # –ø–æ–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤ –∫–ª–∞—Å—Å–µ
    level: int
    menu_name: str
    category: int | None = None
    page: int = 1
    product_id: int | None = None


"""–ü–æ–¥ –∫–∞–∂–¥—ã–º —Ç–æ–≤–∞—Ä–æ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫—É–ø–∏—Ç—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å product_id  
–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö  –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
 page: int = 1
 product_id: int | None = None
 –∏ –ø–∏—à–µ–º —Ç–æ —á—Ç–æ –±—É–¥–µ—Ç  –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –≤  def get_products_btns(), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏

"""


def get_user_main_btns(*, level: int, sizes: tuple[int] = (2,)):
    # (*, level: int, sizes: tuple[int] = (2,))  —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ get_user_main_btns –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
    # –Ω–∞ kbds = get_user_main_btns(level=level) –≤ —Ñ–∞–π–ª–µ  menu_processing  def main_menu

    keyboard = InlineKeyboardBuilder()
    btns = {
        "–¢–æ–≤–∞—Ä—ã üçï": "catalog",
        "–ö–æ—Ä–∑–∏–Ω–∞ üõí": "cart",
        "–û –Ω–∞—Å ‚ÑπÔ∏è": "about",
        "–û–ø–ª–∞—Ç–∞ üí∞": "payment",
        "–î–æ—Å—Ç–∞–≤–∫–∞ ‚õµ": "shipping",
    }
    for text, menu_name in btns.items():  # —Ü–∏–∫–ª–æ–º –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
        if menu_name == 'catalog':
            keyboard.add(InlineKeyboardButton(text=text,
                                              callback_data=MenuCallBack(level=level + 1, menu_name=menu_name).pack()))
        elif menu_name == 'cart':
            keyboard.add(InlineKeyboardButton(text=text,
                                              callback_data=MenuCallBack(level=3, menu_name=menu_name).pack()))
        else:
            keyboard.add(InlineKeyboardButton(text=text,
                                              callback_data=MenuCallBack(level=level, menu_name=menu_name).pack()))

    return keyboard.adjust(*sizes).as_markup()


def get_user_catalog_btns(*, level: int, categories: list, sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                      callback_data=MenuCallBack(level=level - 1, menu_name='main').pack()))
    # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤–µ–¥–µ—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å -1, –º—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    keyboard.add(InlineKeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ üõí',
                                      callback_data=MenuCallBack(level=3, menu_name='cart').pack()))
    # –î–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É, "c" - —ç—Ç–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ—Ç category
    for c in categories:
        keyboard.add(InlineKeyboardButton(text=c.name,
                                          callback_data=MenuCallBack(level=level + 1, menu_name=c.name,
                                                                     category=c.id).pack()))
    # level=level + 1 , —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é, menu_name=c.name - —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    # –∏ —É–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π callback - c.id –¥–ª—è –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–± –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    return keyboard.adjust(*sizes).as_markup()


# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ menu_processing def get_menu_content elif level == 1:


def get_products_btns(
        *,
        level: int,
        category: int,
        page: int,
        pagination_btns: dict,  # –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∏ –≤–ø–µ—Ä–µ–¥
        product_id: int,  # —á—Ç–æ–± —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å callback data –Ω–∞ –∫–Ω–æ–ø–∫–µ –∫—É–ø–∏—Ç—å
        sizes: tuple[int] = (2, 1)
):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                      callback_data=MenuCallBack(level=level - 1, menu_name='catalog').pack()))
    keyboard.add(InlineKeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ üõí',
                                      callback_data=MenuCallBack(level=3, menu_name='cart').pack()))
    keyboard.add(InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å üíµ',
                                      callback_data=MenuCallBack(level=level, menu_name='add_to_cart',
                                                                 product_id=product_id).pack()))
# MenuCallBack(level=level, –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ level –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
    keyboard.adjust(*sizes)

    row = []
    for text, menu_name in pagination_btns.items():
        if menu_name == "next":
            row.append(InlineKeyboardButton(text=text,
                                            callback_data=MenuCallBack(
                                                level=level,    # level –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
                                                menu_name=menu_name,
                                                category=category,
                                                page=page + 1).pack()))

        elif menu_name == "previous":
            row.append(InlineKeyboardButton(text=text,
                                            callback_data=MenuCallBack(
                                                level=level,
                                                menu_name=menu_name,
                                                category=category,
                                                page=page - 1).pack()))

    return keyboard.row(*row).as_markup()  # –∫–Ω–æ–ø–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –Ω–∏–∂–Ω–µ–º —Ä—è–¥—É


def get_user_cart(
        *,
        level: int,
        page: int | None,  # –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        pagination_btns: dict | None,  # –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥", "–≤–ø–µ—Ä–µ–¥ "
        product_id: int | None,  # –¥–ª—è –∫–Ω–æ–ø–æ–∫ "—É–¥–∞–ª–∏—Ç—å" / –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ "-1" "+1"
        sizes: tuple[int] = (3,)  # –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É
):
    keyboard = InlineKeyboardBuilder()
    if page:  # –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        keyboard.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å',
                                          callback_data=MenuCallBack(level=level, menu_name='delete',
                                                                     product_id=product_id, page=page).pack()))
        keyboard.add(InlineKeyboardButton(text='-1',
                                          callback_data=MenuCallBack(level=level, menu_name='decrement',
                                                                     product_id=product_id, page=page).pack()))
        keyboard.add(InlineKeyboardButton(text='+1',
                                          callback_data=MenuCallBack(level=level, menu_name='increment',
                                                                     product_id=product_id, page=page).pack()))

        keyboard.adjust(*sizes)

        row = []
        for text, menu_name in pagination_btns.items():
            if menu_name == "next":
                row.append(InlineKeyboardButton(text=text,
                                                callback_data=MenuCallBack(level=level, menu_name=menu_name,
                                                                           page=page + 1).pack()))
                # + 1 —É –∫–Ω–æ–ø–∫–∏ "—Å–ª–µ–¥.", - 1 —É –∫–Ω–æ–ø–∫–∏ "–ø—Ä–µ–¥."
            elif menu_name == "previous":
                row.append(InlineKeyboardButton(text=text,
                                                callback_data=MenuCallBack(level=level, menu_name=menu_name,
                                                                           page=page - 1).pack()))

        keyboard.row(*row)  # –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –∫–Ω–æ–ø–æ–∫

        row2 = [
            InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†',
                                 callback_data=MenuCallBack(level=0, menu_name='main').pack()),
            InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å',
                                 callback_data=MenuCallBack(level=0, menu_name='order').pack()),
        ]
        # menu_name='order' - –∑–∞–≥–ª—É—à–∫–∞ –∫–Ω–æ–ø–∫–∏ "–∑–∞–∫–∞–∑–∞—Ç—å". –ü–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏—è "–∑–∞–∫–∞–∑–∞—Ç—å" –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
        return keyboard.row(*row2).as_markup()
    else:
        keyboard.add(
            InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†',
                                 callback_data=MenuCallBack(level=0, menu_name='main').pack()))

        return keyboard.adjust(*sizes).as_markup()


def get_callback_btns(*,  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –Ω–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                      btns: dict[str, str],
                      # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å dict[str, str], —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —Å—Ç—Ä–æ–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏,
                      # –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –±–æ—Ç—É –ø—Ä–∏ –∫–ª–∏–∫–µ –∫–Ω–æ–ø–∫–∏
                      sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()

    for text, data in btns.items():
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))

    return keyboard.adjust(*sizes).as_markup()


""" Reply –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç, —Ç–æ —á—Ç–æ –Ω–∞ –Ω–∏—Ö –Ω–∞–ø–∏—Å–∞–Ω–æ .
–ê inline –∫–Ω–æ–ø–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –º–µ—Ç–æ–¥ text- —ç—Ç–æ –Ω–∞–¥–ø–∏—Å—å –Ω–∞ –∫–Ω–æ–ø–∫–µ, –Ω–æ –æ–Ω–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–∞—Ç.

–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å URL,

callback data ( —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ callback query)  ,–≤ –∫–æ—Ç–æ—Ä–æ–π –º—ã –∑–∞–¥–∞–µ–º –æ—Å–æ–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ str,
–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –æ–Ω–æ  –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –±–æ—Ç—É –∏ –º—ã –µ–≥–æ –ª–æ–≤–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º
"""
